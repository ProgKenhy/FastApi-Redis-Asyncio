x-app: &default-app
  build:
    context: "."
    target: "app"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "DEBUG=${DEBUG:-false}"
  depends_on:
    redis:
      condition: "service_healthy"
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  networks:
    - app_network
  environment:
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_PASS=${REDIS_PASS}
    - REDIS_DB=0

services:
  redis:
    image: redis:8.2.1-alpine
    container_name: task_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASS=${REDIS_PASS}
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
      - --requirepass
      - ${REDIS_PASS}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASS}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - app_network

  app:
    <<: *default-app
    container_name: task_app
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src:ro
    healthcheck:
      test: [ 'CMD', 'curl', 'localhost:8000' ]
      interval: 10s
      timeout: 5s
      start_period: 5s
      retries: 3
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    networks:
      - monitoring_network
      - app_network


  worker:
    <<: *default-app
    container_name: task_worker
    command: celery -A config worker -l "${CELERY_LOG_LEVEL:-debug}" -P eventlet
    ports: [ ]


  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - ./logs:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./prometheus/configuration/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: false
    user: "0"
    networks:
      - monitoring_network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/configuration/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    networks:
      - monitoring_network

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      - monitoring_network

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./prometheus/configuration/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafanadata:/var/lib/grafana
      - ./prometheus/grafana/provisioning/:/etc/grafana/provisioning/:ro
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards=false
    networks:
      - monitoring_network


volumes:
  redis_data:
    driver: local
  celery_beat_data:
    driver: local
  grafanadata:
  prometheusdata:

networks:
  app_network:
    driver: bridge
  monitoring_network:
    driver: bridge